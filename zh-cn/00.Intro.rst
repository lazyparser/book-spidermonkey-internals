简介
====

JavaScript
----------
.. TODO 插入几个主要的应用场景，web，nodejs，IoT

JavaScript 是最早由 Brendan Eich 设计的网页语言。到了今天已经是无处不在。
有关 JavaScript 的历史可以参考维基百科 [1]_。

目前主流的浏览器都提供了JavaScript语言的执行环境，并且Mozilla Firefox、
Google Chrome、 Apple Safari、Microsoft Edge 四大浏览器的JS引擎均已开源，
为编译器和程序语言相关的技术人员及爱好者提供了丰富的学习资源。

本书以 Mozilla Firefox 中使用的JS引擎 Spidermonkey 作为分析对象，
希望能够为读者在分析程序语言解释器原理和JIT实现过程中，起到一点帮助和指引的作用。

Spidermonkey 历史
-----------------

介绍SpiderMonkey的发展过程. 主要介绍几个JIT的演变(就关注过这个).
有关 Spidermonkey 的历史参考 [2]_

Firefox 架构及内存组织
----------------------
.. TODO quantum project 之后已经完全不同了。需要重写

近期 FF57+ 开始 Firefox 的架构产生了根本性的改变，从单进程多线程的架构，转变为多进程架构（这点四大主流浏览器已经统一）。
另一方面，Mozilla领导研发的Rust语言也逐步壮大，在Firefox中起到的作用越来越大，不排除未来使用Rust语言重写JS引擎的可能。
本书以FF57+中使用的Spidermonkey为分析对象，目前依然以C++语言和JavaScript为主，在后续涉及Rust实现的部分会加以简单介绍。

SpiderMonkey 的架构
-------------------

官方的资料可以参考 [3]_。注意里面的文档资料可能已经过时，例如 Tracing JIT 部分在2014年之后就没有进行过维护（已经被移除了）。

由于Spidermonkey有着漫长的历史（几乎跟JavaScript的历史一样长），在网上搜索和阅读有关Spidermonkey的资料的时候尤其需要注意查询的技术文档的时效性。
在过去短短的五年时间中，Spidermonkey的架构就发生过数次较大的变化，而且随着浏览器“军备竞赛”的持续，Spidermonkey的开发团队一直保持着惊人的开发效率。

目前的Spidermonkey架构可以大致分为一下几个部分：

- JS前端，也就是 parser，负责将JavaScript源文件（文本）通过词法分析、语法解析，翻译成Spidermonkey字节码的形式，为后续的解释执行进行准备。

- 解释器（Interpreter）：前端生成了字节码之后，解释器就可以逐个字节码的解释执行了。目前可以简单的将解析器理解为一个巨大的switch-case结构，每次读入一个字节码，执行一些运算，进行一些判断，然后读入下一条字节码继续。

- Baseline JIT：我还不知道怎么翻译合适，目前就直接用英文原文了。当JS的字节码届时执行的次数比较多的时候（目前是10次），就会调用 Baseline JIT 对这个JS函数（JS的JIT是以函数为单位）进行即使编译，根据运行平台的不同翻译成x86或者ARM的机器指令。Baseline JIT 基本上也是逐条字节码的翻译成机器指令，相当于我们gcc编译C/C++程序中的-O0优化。虽然没有进行高级的优化，但是相对于解释器而言，省掉了每次都执行switch-case的过程，要比解释器快。

- IonMonkey JIT：这是一个叫做 method-based JIT，意思是编译的时候，不像 Baseline JIT 那样只考虑单条字节码，而是考虑整个JS函数。所以在IonMonkey中就可以做一些比较复杂的优化了。比如首先会从字节码触发，构建一个控制流图，然后可以做一些经典编译优化算法，例如循环不变量外提、公共子表达式删除、寄存器分配、指令生成、指令调度等。

- VM：语言虚拟机，是JS字节码和JITed code的实际执行环境。

- GC：垃圾收集，是VM的一个组成部分，因为比较重要，所以单独列了出来，后续会提到。

.. TODO 这里需要添加简介，并没有现成的中文资料。

.. [1] https://en.wikipedia.org/wiki/JavaScript

.. [2] https://en.wikipedia.org/wiki/SpiderMonkey

.. [3] https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals
